basePath: /api
definitions:
  handlers.CategoryInput:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  handlers.CreateOrderInput:
    properties:
      items:
        items:
          properties:
            product_id:
              type: integer
            quantity:
              minimum: 1
              type: integer
          required:
          - product_id
          - quantity
          type: object
        minItems: 1
        type: array
      payment_method:
        type: string
      user_id:
        type: integer
    required:
    - items
    - payment_method
    - user_id
    type: object
  handlers.CreateUserInput:
    properties:
      name:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - name
    - password
    - username
    type: object
  handlers.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  handlers.LoginInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  handlers.LoginResponse:
    properties:
      refresh_token:
        type: string
      token:
        type: string
    type: object
  handlers.ProductInput:
    properties:
      category_id:
        type: integer
      name:
        type: string
      price:
        type: number
      sku:
        type: string
    required:
    - name
    - price
    - sku
    type: object
  handlers.RefreshTokenInput:
    properties:
      refresh_token:
        type: string
    type: object
  handlers.UpdatePasswordInput:
    properties:
      confirm_password:
        type: string
      password:
        type: string
    required:
    - confirm_password
    - password
    type: object
  handlers.UpdateProfileInput:
    properties:
      name:
        type: string
      username:
        type: string
    required:
    - name
    - username
    type: object
  handlers.UpdateStockInput:
    properties:
      notes:
        type: string
      quantity:
        type: integer
      sub_type:
        type: string
      type:
        enum:
        - in
        - out
        type: string
    required:
    - quantity
    - sub_type
    - type
    type: object
  handlers.UpdateUserInput:
    properties:
      name:
        type: string
      password:
        type: string
      role:
        enum:
        - admin
        - user
        type: string
      username:
        type: string
    required:
    - name
    - role
    - username
    type: object
  models.CartPromotion:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      discount_value:
        type: number
      end_date:
        type: string
      id:
        type: integer
      minimum_purchase_amount:
        type: number
      promotion_type:
        description: e.g., "percentage_discount", "fixed_discount"
        type: string
      start_date:
        type: string
      updated_at:
        type: string
    type: object
  models.ProductPromotion:
    properties:
      buy_product_id:
        type: integer
      created_at:
        type: string
      deleted_at:
        type: string
      discount_value:
        type: number
      end_date:
        type: string
      get_product_id:
        type: integer
      id:
        type: integer
      product_id:
        type: integer
      promo_price:
        description: For "bundle_price"
        type: number
      promotion_type:
        description: e.g., "percentage_discount", "fixed_discount", "buy_x_get_y",
          "bundle_price"
        type: string
      required_quantity:
        description: For "bundle_price" or "buy_x_get_y"
        type: integer
      start_date:
        type: string
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: This is a comprehensive Point of Sale (POS) API server.
  license:
    name: MIT
    url: https://github.com/esaprakoso/pos-api/blob/main/LICENSE
  title: POS (Point of Sale) API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user with username and password to get access and refresh
        tokens.
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Login a user
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh an expired access token using a refresh token.
      parameters:
      - description: Refresh token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/handlers.RefreshTokenInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Refresh access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with username, name, and password.
      parameters:
      - description: User registration info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register a new user
      tags:
      - Auth
  /cart-promotions:
    get:
      description: Get a list of all cart promotions.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all cart promotions
      tags:
      - Promotions
    post:
      consumes:
      - application/json
      description: Create a new cart promotion. Admin only.
      parameters:
      - description: Promotion data
        in: body
        name: promotion
        required: true
        schema:
          $ref: '#/definitions/models.CartPromotion'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new cart promotion
      tags:
      - Promotions
  /cart-promotions/{id}:
    delete:
      description: Delete a cart promotion by its ID. Admin only.
      parameters:
      - description: Promotion ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a cart promotion by ID
      tags:
      - Promotions
    get:
      description: Get a single cart promotion by its ID.
      parameters:
      - description: Promotion ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get a cart promotion by ID
      tags:
      - Promotions
    put:
      consumes:
      - application/json
      description: Update a cart promotion's details by its ID. Admin only.
      parameters:
      - description: Promotion ID
        in: path
        name: id
        required: true
        type: integer
      - description: Promotion data to update
        in: body
        name: promotion
        required: true
        schema:
          $ref: '#/definitions/models.CartPromotion'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update a cart promotion by ID
      tags:
      - Promotions
  /categories:
    get:
      description: Get a list of all categories.
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Create a new category. Admin only.
      parameters:
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/handlers.CategoryInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "406":
          description: Not Acceptable
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new category
      tags:
      - Categories
  /categories/{id}:
    delete:
      description: Delete a category by its ID. Admin only.
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a category by ID
      tags:
      - Categories
    get:
      description: Get a single category by its ID.
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get a category by ID
      tags:
      - Categories
    put:
      consumes:
      - application/json
      description: Update a category's details by its ID. Admin only.
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category data to update
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/handlers.CategoryInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "406":
          description: Not Acceptable
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update a category by ID
      tags:
      - Categories
  /orders:
    get:
      description: Get a list of all orders. Admin can see all, users see their own.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all orders
      tags:
      - Orders
    post:
      consumes:
      - application/json
      description: Create a new order with specified products and payment method.
      parameters:
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateOrderInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new order
      tags:
      - Orders
  /orders/{id}:
    get:
      description: Get a single order by its ID. Admin can see any order, users see
        their own.
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get an order by ID
      tags:
      - Orders
  /product-promotions:
    get:
      description: Get a list of all product promotions.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all product promotions
      tags:
      - Promotions
    post:
      consumes:
      - application/json
      description: Create a new product promotion. Admin only.
      parameters:
      - description: Promotion data
        in: body
        name: promotion
        required: true
        schema:
          $ref: '#/definitions/models.ProductPromotion'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new product promotion
      tags:
      - Promotions
  /product-promotions/{id}:
    delete:
      description: Delete a product promotion by its ID. Admin only.
      parameters:
      - description: Promotion ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a product promotion by ID
      tags:
      - Promotions
    get:
      description: Get a single product promotion by its ID.
      parameters:
      - description: Promotion ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get a product promotion by ID
      tags:
      - Promotions
    put:
      consumes:
      - application/json
      description: Update a product promotion's details by its ID. Admin only.
      parameters:
      - description: Promotion ID
        in: path
        name: id
        required: true
        type: integer
      - description: Promotion data to update
        in: body
        name: promotion
        required: true
        schema:
          $ref: '#/definitions/models.ProductPromotion'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update a product promotion by ID
      tags:
      - Promotions
  /products:
    get:
      description: Get a list of all products with pagination.
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create a new product. Admin only.
      parameters:
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handlers.ProductInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "406":
          description: Not Acceptable
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - Products
  /products/{id}:
    delete:
      description: Delete a product by its ID. Admin only.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a product by ID
      tags:
      - Products
    get:
      description: Get a single product by its ID.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get a product by ID
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update a product's details by its ID. Admin only.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product data to update
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handlers.ProductInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "406":
          description: Not Acceptable
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update a product by ID
      tags:
      - Products
  /products/{id}/stock:
    patch:
      consumes:
      - application/json
      description: Update the stock of a product. Admin only.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Stock update info
        in: body
        name: stock_update
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateStockInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update product stock
      tags:
      - Products
  /profile:
    get:
      description: Get the profile of the currently logged-in user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - Profile
    patch:
      consumes:
      - application/json
      description: Update the profile of the currently logged-in user.
      parameters:
      - description: User data to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateProfileInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - Profile
  /profile/password:
    patch:
      consumes:
      - application/json
      description: Update the password of the currently logged-in user.
      parameters:
      - description: Password update info
        in: body
        name: password_info
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdatePasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user password
      tags:
      - Profile
  /users:
    get:
      description: Get a list of all users. Admin only.
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - Users
  /users/{id}:
    delete:
      description: Delete a user by their ID. Admin only.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a user by ID
      tags:
      - Users
    get:
      description: Get a single user by their ID. Admin only.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Update a user's details by their ID. Admin only.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "406":
          description: Not Acceptable
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update a user by ID
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
